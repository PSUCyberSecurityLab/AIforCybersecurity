import glob
import pickle
import numpy as np
import config
import os
import random
import json
from shutil import copyfile, rmtree
from sklearn.model_selection import train_test_split
import subprocess
import networkx as nx
from binary2image import getGreyScaleImage, getRGBImage
#from binary2cfg import get_CFG


def filter_data(ori):
    info = json.loads(ori[-2])
    if os.path.getsize(ori[0]) > config.max_size:
        return False
    if info['Class'] == "ELF32" and info['Type'] == 'EXEC (Executable file)' and info['Machine'] == "ARM":# and info['Machine'] == "Intel 80386":# and info['OS/ABI'] == 'UNIX - System V' :
        bb = int(ori[1].split(':')[1])
        func = int(ori[2].split(':')[1])
        if bb != func and bb > 3 and func > 1:
            return True
    return False

def choose_data(): 
    '''
    ori_virus = []
    with open('result_Virus_bb.out', "r") as fp:
        for ori in fp.readlines():
            ori = ori.strip('\n').split('\t')
            if (filter_data(ori)):
                ori_virus.append(ori[0])
    print(len(ori_virus))
    ori_benign = []
    with open('result_Benign_bb.out', "r") as fp:
        for ori in fp.readlines():
            ori = ori.strip('\n').split('\t')
            if (filter_data(ori)):
                ori_benign.append(ori[0])
        print(len(ori_benign))
        ori_benign = random.sample(ori_benign, k = len(ori_virus))
    
    ori_alls = np.concatenate([ori_benign,ori_virus])
    print(len(ori_virus), len(ori_benign), len(ori_alls))
    with open(config.dataset, 'wb') as jf:
        pickle.dump(ori_alls, jf)
    
    for f in ori_alls:
        if f.find('Virus') != -1:
            os.makedirs(os.path.dirname('data/binary/Virus/' + f.split('/')[-1]), exist_ok=True)
            copyfile(f, 'data/binary/Virus/' + f.split('/')[-1])
            os.makedirs(os.path.dirname('data/L/Virus/'+ f.split('/')[-1] + '_L' + '.png'), exist_ok=True)
            copyfile('images/Virus/' + f.split('/')[-1] + '_L' + '.png', 'data/L/Virus/'+ f.split('/')[-1] + '_L' + '.png')
            os.makedirs(os.path.dirname('data/RGB/Virus/'+ f.split('/')[-1] + '_RGB' + '.png'), exist_ok=True)
            copyfile('images/Virus/' + f.split('/')[-1] + '_RGB' + '.png', 'data/RGB/Virus/'+ f.split('/')[-1] + '_RGB' + '.png')
        else:
            os.makedirs(os.path.dirname('data/binary/Benign/' + f.split('/')[-1]), exist_ok=True)
            copyfile(f, 'data/binary/Benign/' + f.split('/')[-1])
            os.makedirs(os.path.dirname('data/L/Benign/'+ f.split('/')[-1] + '_L' + '.png'), exist_ok=True)
            copyfile('images/Benign/' + f.split('/')[-1] + '_L' + '.png', 'data/L/Benign/'+ f.split('/')[-1] + '_L' + '.png')
            os.makedirs(os.path.dirname('data/RGB/Benign/'+ f.split('/')[-1] + '_RGB' + '.png'), exist_ok=True)
            copyfile('images/Benign/' + f.split('/')[-1] + '_RGB' + '.png', 'data/RGB/Benign/'+ f.split('/')[-1] + '_RGB' + '.png')
    '''
    with open(config.dataset, 'rb') as jf:
        ori_alls = pickle.load(jf)
    print(len(ori_alls))
    
def split():
    b = glob.glob('data/CFG_hex/Benign/*')
    v = glob.glob('data/CFG_hex/Virus/*')
    #b = glob.glob('data/binary/Benign/*')
    #v = glob.glob('data/binary/Virus/*')
    idx = list(range(len(b + v)))
    lbs = [config.benign_label] * int(len(b))
    lbs.extend([config.malware_label] * int(len(v)))
    k = train_test_split(idx, lbs, test_size=0.2)
    print(len(k[2]), np.sum(np.array(k[2]) == 0), np.sum(np.array(k[2]) == 1))
    print(len(k[3]), np.sum(np.array(k[3]) == 0), np.sum(np.array(k[3]) == 1))   
    with open(config.CFG_split_data, 'wb') as jf:
        pickle.dump(k, jf)

def change_label():
    with open(config.CFG_split_data, 'rb') as jf:
        train_set, test_set, _, _ = pickle.load(jf)
    b = glob.glob('data/CFG_hex/Benign/*')
    v = glob.glob('data/CFG_hex/Virus/*')
    lbs_train = check_distribution(train_set, b+v)
    lbs_test = check_distribution(test_set, b+v)
    with open(config.CFG_split_data, 'wb') as jf:
        pickle.dump((train_set, test_set, lbs_train, lbs_test), jf)

def check_distribution(fns, ns = None):
    lbs = []
    for f in fns:
        if ns != None:
            lbs.append(config.malware_label  if ns[f].find('Virus') != -1 else config.benign_label)
        else:
            lbs.append(config.malware_label  if f.find('Virus') != -1 else config.benign_label)

    print(len(lbs), np.sum(np.array(lbs)==0), np.sum(np.array(lbs)==1))
    return lbs
   
class RNNSeq(object):
    def __init__(self, sub_wins, label):
        self.num_sub_wins = len(sub_wins) 
        self.label = label                   
        self.sub_wins = sub_wins   

def Seqdata():
    #files = glob.glob('data/binary/Virus/*') + glob.glob('data/binary/Benign/*')
    files=glob.glob("data/CFG_hex/Benign/*")+glob.glob("data/CFG_hex/Virus/*")
    os.makedirs(os.path.dirname('data/Seq-ori/Virus/'), exist_ok=True)
    os.makedirs(os.path.dirname('data/Seq-ori/Benign/'), exist_ok=True)
  
    for f in files:
        f ='data/binary/'+'/'.join(f.split('/')[-2:]) 
        tmp = np.fromfile(f, np.uint8)
        tmp = np.array(tmp)
        length = len(tmp) if len(tmp) % config.sequence_length == 0 else config.sequence_length - len(tmp) % config.sequence_length + len(tmp)
        res = np.ones(length) * (config.max_features-1)#np.ones(config.max_size) * (config.max_features-1)
        res[:tmp.shape[0]] = tmp
        res = np.reshape(res, (-1, config.sequence_length))
        np.savetxt('data/Seq-ori/'+f.lstrip('data/binary/')+'.txt', res,  fmt='%d') 
        
    
def count_dims():
    max_features = 0
    max_nodes = 0
    files = glob.glob('data/CFG_hex/Virus/*') + glob.glob('data/CFG_hex/Benign/*')
    for f in files:
        with open(f, 'r') as jf:
            strs = json.load(jf)
            max_nodes = max(max_nodes, len(strs['nodes']))
            for node in strs['nodes']:
                if node['vector'] != None:
                    b = bytearray.fromhex(node['vector'])
                    uint8 = []
                    for i in range(len(b)):
                        uint8.append(b[i])
                    max_features = max(max_features, len(uint8))
    print(max_features, max_nodes)


class GNNGraph(object):
    def __init__(self, g, label, node_features=None):
        self.num_nodes = g.number_of_nodes() # 
        self.label = label                   # 
        self.node_features = node_features   # 
        self.degrees = list(dict(g.degree()).values())   # 
        self.edges = list(g.edges)           # 

def map_opcode():
    op2 = set([config.split_token])
    files = glob.glob('data/CFG_features/Virus/*') + glob.glob('data/CFG_features/Benign/*')
    for f in files:
        with open(f, 'r') as jf:
            strs = json.load(jf)
            for idx, block in enumerate(strs['blocks']):
                instructions = block[4]
                if instructions == None:
                    continue
                for instruction in instructions.split('\n'):
                    opcodes = instruction.split('\t')
                    if (len(opcodes)==3):
                        op2.add(opcodes[1]) 
    opcode_voc = {op:idx for idx, op in enumerate(op2)}
    with open(config.opcode_voc, 'w') as jf:
      json.dump(opcode_voc, jf)            

def Graphdata_opcode():
    with open(config.opcode_voc, 'r') as jf:
        opcode_voc = json.load(jf)
        print(opcode_voc)
    config.vector_size_bytes = len(opcode_voc)
    idx = sorted(opcode_voc.values())
    eye = np.eye(max(idx) + 1)
    features = eye[idx]
    print(features)
    files = glob.glob('data/CFG_features/Virus/*') + glob.glob('data/CFG_features/Benign/*')
    g_list = []     
    nodes_size = []
    for f in files:
        with open(f, 'r') as jf:
            strs = json.load(jf)
            g = nx.Graph()
            node_features = []
            n_edges = 0
            if len(strs['blocks']) < 10:
                print(f)
                import pdb
                pdb.set_trace()
            nodes_size.append(len(strs['blocks']))
            block_id = {}
            for idx, node in enumerate(strs['blocks']):
                block_id[node[0]] = idx
                g.add_node(idx)
                instructions = node[4]
                vector = with_opcode(instructions, opcode_voc, features)
                node_features.append(vector)
            for link in strs['edges']:
                g.add_edge(block_id[link[0]], block_id[link[1]])
            node_features = np.stack(node_features) 
            g_list.append(GNNGraph(g, config.malware_label if f.find('Virus') != -1 else config.benign_label, node_features))
    print(nodes_size)
    import pandas as pd
    m = pd.DataFrame({0:nodes_size})
    print(m.describe())
    #with open(config.graph_opcode_data, 'wb') as jf:
    #    pickle.dump(g_list, jf)

def with_opcode(instructions, opcode_voc, features):
    if instructions == None:
        return features[opcode_voc[config.split_token]].tolist()
    vectors = []
    for instruction in instructions.split('\n'):
        opcodes = instruction.split('\t')
        if (len(opcodes)==3):
            vectors.append(features[opcode_voc[opcodes[1]]]) 
        else:
            print(opcodes)
            vectors.append(features[opcode_voc[config.split_token]])
    return np.sum(np.array(vectors), axis=0).tolist()
    
def Graphdata():
    files = glob.glob('data/CFG_hex/Virus/*') + glob.glob('data/CFG_hex/Benign/*')
    g_list = []     
    for f in files:
        with open(f, 'r') as jf:
            strs = json.load(jf)
            g = nx.Graph()
            node_features = []
            n_edges = 0
            block_id = {}
            for idx, node in enumerate(strs['nodes']):
                block_id[node['id']] = idx
                g.add_node(idx)
                uint8 = []
                if node['vector'] != None:
                    b = bytearray.fromhex(node['vector'])
                    for i in range(len(b)):
                        uint8.append(b[i])
                uint8.extend([config.max_features]*(config.feature_dim - len(uint8)))
                node_features.append(uint8)
            for link in strs['links']:
                g.add_edge(block_id[link['source']], block_id[link['target']])
            node_features = np.stack(node_features) 
            g_list.append(GNNGraph(g, config.malware_label if f.find('Virus') != -1 else config.benign_label, node_features))
    with open(config.graph_data, 'wb') as jf:
        pickle.dump(g_list, jf)
                
def get_feat(state, name):
        if name=="cnn" or name=="mlp":
            if config.image_type == 'L':
                img=getGreyScaleImage(state)
            else:
                img=getRGBImage(state)
            return np.array(img, dtype="float")
        elif name=='gnn':
            return get_CFG(state)
            pass

if __name__ == '__main__':
    #map_opcode()
    #Graphdata_opcode()
    '''
    ori_virus = []
    with open('result_Virus_bb.out', "r") as fp:
        for ori in fp.readlines():
            ori = ori.strip('\n').split('\t')
            if (filter_data(ori)):
                ori_virus.append(ori[0])
    for f in ori_virus:
        if f.find('Virus') != -1:
            os.makedirs(os.path.dirname('data/arm/Virus/' + f.split('/')[-1]), exist_ok=True)
            copyfile(f, 'data/arm/Virus/' + f.split('/')[-1])
    '''
    

    Seqdata()
